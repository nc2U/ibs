"""
Django settings for _config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import sys
from datetime import timedelta
from pathlib import Path

from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())

SITE_ID = 1

APPEND_SLASH = True

AUTH_USER_MODEL = 'accounts.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
]

INSTALLED_APPS += [  # plugin
    'import_export',
    'rangefilter',
    'widget_tweaks',
    'django_markdown2',
    'mdeditor',
    'storages',
    'mathfilters',
    'rest_framework',
    'rest_framework_simplejwt',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap4',
]

INSTALLED_APPS += [  # app
    'apiV1.apps.ApiV1Config',
    'accounts.apps.AccountsConfig',
    'book.apps.BookConfig',
    'board.apps.BoardConfig',
    'cash.apps.CashConfig',
    'company.apps.CompanyConfig',
    'contract.apps.ContractConfig',
    'docs.apps.DocsConfig',
    'ibs.apps.IbsConfig',
    'items.apps.ItemsConfig',
    'notice.apps.NoticeConfig',
    'payment.apps.PaymentConfig',
    'project.apps.ProjectConfig',
    'work.apps.WorkConfig',
    '_excel.apps.ExcelConfig',
    '_pdf.apps.PdfConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = '_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '_config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASE_TYPE = config('DATABASE_TYPE', default='postgres')  # postgres | maraidb - selected docker db app
DB_ENGINE = 'postgresql' if DATABASE_TYPE == 'postgres' else 'mysql'
DATABASE_NAME = config('DATABASE_NAME', default='')
DATABASE_USER = config('DATABASE_USER', default='')
DATABASE_PASSWORD = config('DATABASE_PASSWORD', default='')
NAMESPACE = config('NAMESPACE', default='default')
KUBERNETES_SERVICE_HOST = config('KUBERNETES_SERVICE_HOST', default=None)

MASTER_HOST = f'{DATABASE_TYPE}-primary.{NAMESPACE}.svc.cluster.local' \
    if KUBERNETES_SERVICE_HOST else DATABASE_TYPE
DEFAULT_OPTIONS = {'connect_timeout': 10, 'options': f'-c search_path={DATABASE_NAME},public'} \
    if DATABASE_TYPE == 'postgres' else {
    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  # 초기 명령어 설정
    'charset': 'utf8mb4',  # 캐릭터셋 설정
    'connect_timeout': 10,  # 연결 타임아웃 설정
}

REPLICA_OPTIONS = {'connect_timeout': 10, 'options': f'-c search_path={DATABASE_NAME},public'} \
    if DATABASE_TYPE == 'postgres' else {'charset': 'utf8mb4', 'connect_timeout': 10, }

DATABASES = {
    'default': {
        'ENGINE': f'django.db.backends.{DB_ENGINE}',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        "DEFAULT-CHARACTER-SET": 'utf8',
        'HOST': MASTER_HOST,
        'PORT': config('POSTGRES_PRIMARY_SERVICE_PORT', default='5432') \
            if DATABASE_TYPE == 'postgres' \
            else config('MARIADB_PRIMARY_SERVICE_PORT_MYSQL', default='3306'),
        'OPTIONS': DEFAULT_OPTIONS,
    },
    'replica': {
        'ENGINE': f'django.db.backends.{DB_ENGINE}',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        "DEFAULT-CHARACTER-SET": 'utf8',
        'HOST': f'{DATABASE_TYPE}-read.{NAMESPACE}.svc.cluster.local',
        'PORT': config('POSTGRES_READ_SERVICE_PORT', default='5432') \
            if DATABASE_TYPE == 'postgres' \
            else config('MARIADB_READ_SERVICE_PORT_MYSQL', default='3306'),
        'OPTIONS': REPLICA_OPTIONS,
    }
}

DATABASE_ROUTERS = ["_config.database_router.MasterSlaveRouter"]

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_TZ = True

USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
AWS_REGION = 'ap-northeast-2'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_REGION}.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400', }
AWS_DEFAULT_ACL = 'public-read'

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_DIRS = [BASE_DIR / '_assets']

DEFAULT_FILE_STORAGE = ('_config.asset_storage.MediaStorage'
                        if AWS_STORAGE_BUCKET_NAME else
                        'django.core.files.storage.FileSystemStorage')

# 각 media 파일에 관한 URL prefix
MEDIA_URL = (f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
             if AWS_STORAGE_BUCKET_NAME else '/media/')
MEDIA_ROOT = BASE_DIR / 'media'  # 업로드된 파일을 저장할 디렉토리 경로

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_SIGNUP_FIELDS = ['username*', 'email*', 'password1*']

# EMAIL SETTINGS
DOMAIN_HOST = config('DOMAIN_HOST', default='http://localhost/')  # ex: 'https://abc.com/'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')  # 'your-smtp-server.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True  # 587일 경우, EMAIL_USE_SSL = True  # 465일 경우 사용
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # 'your accessId or accessEmail'
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')  # 'your-email-password'
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')  # 'your-email@example.com'

CRISPY_TEMPLATE_PACK = "bootstrap4"
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'apiV1.pagination.LimitOffsetPaginationWithMaxLimit',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'apiV1.pagination.PageNumberPaginationCustomBasic',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.backends.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '20/hour',
        'user': '5000/hour',
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=28),
    'ROTATE_REFRESH_TOKENS': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MDEDITOR_CONFIGS = {
    'default': {
        'language': 'en',
        'width': '100%',  # Custom edit box width
        'height': 500,  # Custom edit box height
        'toolbar': ["undo", "redo", "|",
                    "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|",
                    "h1", "h2", "h3", "h5", "h6", "|",
                    "list-ul", "list-ol", "hr", "|",
                    "link", "reference-link", "code", "preformatted-text", "code-block", "table", "datetime", "emoji",
                    "html-entities", "pagebreak", "|", "goto-line", "|", "help", "info",
                    "||", "preview", "watch", "fullscreen"],  # custom edit box toolbar
        'upload_image_formats': ["jpg", "jpeg", "gif", "png"],  # image upload format type
        'image_folder': 'mke_images',  # image save the folder name
        'theme': 'default',  # edit box theme, dark / default
        'preview_theme': 'default',  # Preview area theme, dark / default
        'editor_theme': 'default',  # edit area theme, pastel-on-dark / default
        'toolbar_autofixed': True,  # Whether the toolbar capitals
        'search_replace': True,  # Whether to open the search for replacement
        'emoji': True,  # whether to open the expression function
        'tex': True,  # whether to open the tex chart function
        'flow_chart': True,  # whether to open the flow chart function
        'sequence': True,  # Whether to open the sequence diagram function
        'watch': True,  # Live preview
        'lineWrapping': True,  # lineWrapping
        'lineNumbers': True  # lineNumbers
    }
}

# Import-Export Optimization Settings
IMPORT_EXPORT_USE_TRANSACTIONS = True
IMPORT_EXPORT_CHUNK_SIZE = 1000
IMPORT_EXPORT_TMP_STORAGE_CLASS = 'import_export.tmp_storages.TempFolderStorage'
IMPORT_EXPORT_IMPORT_PERMISSION_CODE = 'add'
IMPORT_EXPORT_EXPORT_PERMISSION_CODE = 'change'

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30분
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25분
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

APP_ORDER = [
    'company',
    'work',
    'project',
    'items',
    'payment',
    'contract',
    'cash',
    'ibs',
    'notice',
    'docs',
    'board',
    'accounts',
    'book',
]

# Slack Notifications Settings
SLACK_NOTIFICATIONS_ENABLED = config('SLACK_NOTIFICATIONS_ENABLED', default=True, cast=bool)

# iwinv SMS API Settings
IWINV_API_KEY = config('IWINV_API_KEY', default='')
IWINV_AUTH_KEY = config('IWINV_AUTH_KEY', default='')

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,  # 중요: stdout으로 보내기
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
