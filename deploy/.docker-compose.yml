services:

  mariadb:
    container_name: ibs-mariadb
    image: mariadb
    restart: always
    command: [ "--character-set-server=utf8", "--collation-server=utf8_unicode_ci" ]
    environment:
      MYSQL_DATABASE: my-db-name # 실제 데이터로 수정
      MYSQL_USER: my-db-user # 실제 데이터로 수정
      MYSQL_PASSWORD: my-db-password # 실제 데이터로 수정
      MYSQL_ROOT_PASSWORD: my-db-root-password # 실제 데이터로 수정
      TZ: Asia/Seoul
    volumes:
      - mariadb_data:/var/lib/mysql
      - ../volume/backups:/var/backups
      - ../volume/initdb/mariadb:/docker-entrypoint-initdb.d

  postgres:
    container_name: ibs-postgres
    image: postgres
    restart: always
    command: [ "postgres", "-c", "timezone=Asia/Seoul" ]
    environment:
      POSTGRES_DB: my-db-name # 실제 데이터로 수정
      POSTGRES_USER: my-db-super-user # 실제 데이터로 수정
      POSTGRES_SCHEMA: my-db-schema # 실제 데이터로 수정
      POSTGRES_PASSWORD: my-db-password # 실제 데이터로 수정
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/18/main
      - ../volume/backups:/var/backups
      - ../volume/initdb/postgres:/docker-entrypoint-initdb.d
  
  nginx:
    container_name: ibs-nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ../app/django/static:/django/static
      - ../app/django/media:/django/media
    depends_on:
      - web

  redis:
    container_name: ibs-redis
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes
    environment:
      TZ: Asia/Seoul
    volumes:
      - ../volume/redis:/data

  web:
    container_name: ibs-web
    build: docker/python/dev  # 또는 docker/python (개발 환경에 따라)
    image: nc2u/django
    environment:
      DATABASE_TYPE: mariadb  # mariadb | postgres (default: mariadb)
      DATABASE_NAME: my-db-name # 실제 데이터로 수정
      DATABASE_USER: my-db-user # 실제 데이터로 수정
      DATABASE_PASSWORD: my-db-password # 실제 데이터로 수정
      # AWS_STORAGE_BUCKET_NAME: aws-s3-bucket-name # 실제 데이터로 수정
      # AWS_ACCESS_KEY_ID: aws-access-key-id # 실제 데이터로 수정
      # AWS_SECRET_ACCESS_KEY: aws-secret-access-key # 실제 데이터로 수정
      DOMAIN_NAME: https://abc.com/ # 실제 데이터로 수정
      EMAIL_HOST: your-smtp-server.com # 실제 데이터로 수정
      EMAIL_PORT: 587   # 기본값은 587, 기본값과 다를 경우 실제 데이터로 수정
      EMAIL_HOST_USER: your-access-id-or-email # 실제 데이터로 수정
      EMAIL_HOST_PASSWORD: your-email-password # 실제 데이터로 수정
      DEFAULT_FROM_EMAIL: sender name <your@djangoapp.com> # 실제 데이터로 수정
      DJANGO_SETTINGS_MODULE: _config.settings # Django settings 모드 지정
      CELERY_BROKER_URL: redis://redis:6379/0 # Celery 브로커 URL 추가
      CELERY_RESULT_BACKEND: redis://redis:6379/0 # Celery 결과 백엔드 추가
    volumes:
      - ../app/django:/app/django
      - ../app/repos:/app/repos
    depends_on:
      - redis
      - mariadb  # 또는 postgres (사용하는 DB에 따라)

  celery:
    container_name: ibs-celery
    image: nc2u/django
    entrypoint: [ ]
    command: [ "celery", "-A", "_config", "worker", "--loglevel=info", "--concurrency=4" ]
    working_dir: /app/django
    restart: always
    environment:
      DATABASE_TYPE: mariadb  # mariadb | postgres (default: mariadb)
      DATABASE_NAME: my-db-name # 실제 데이터로 수정
      DATABASE_USER: my-db-user # 실제 데이터로 수정
      DATABASE_PASSWORD: my-db-password # 실제 데이터로 수정
      EMAIL_HOST: your-smtp-server.com # 실제 데이터로 수정
      EMAIL_PORT: 587   # 기본값은 587, 기본값과 다를 경우 실제 데이터로 수정
      EMAIL_HOST_USER: your-access-id-or-email # 실제 데이터로 수정
      EMAIL_HOST_PASSWORD: your-email-password # 실제 데이터로 수정
      DEFAULT_FROM_EMAIL: sender name <your@djangoapp.com> # 실제 데이터로 수정
      DJANGO_SETTINGS_MODULE: _config.settings
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ../app/django:/app/django
      - ../app/repos:/app/repos
    depends_on:
      - redis
      - mariadb  # 또는 postgres (사용하는 DB에 따라)

volumes:
  postgres_data:
    driver: local
  mariadb_data:
    driver: local