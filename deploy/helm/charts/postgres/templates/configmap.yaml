{{- if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.fullname" . }}-config
data:
  POSTGRES_USER: "{{ .Release.Name }}"
  POSTGRES_DB: "{{ .Release.Name }}"
  TZ: "Asia/Seoul"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.fullname" . }}-replica-cm
data:
  primary.conf: |
    wal_level = replica
    max_wal_senders = 10
    wal_keep_size = 64
    hot_standby = on
    hba_file = '/etc/postgresql/pg_hba.conf'

  pg_hba.conf: |
    # Allow replication connections from replicas (replace CIDR accordingly)
    host replication {{ .Release.Name }} 0.0.0.0/0 trust

  primary.sql: |
    \c {{ .Release.Name }}
    CREATE SCHEMA IF NOT EXISTS {{ .Release.Name }};
    GRANT ALL ON SCHEMA {{ .Release.Name }} TO {{ .Release.Name }};
    ALTER ROLE "{{ .Release.Name }}" WITH REPLICATION LOGIN PASSWORD '{{ .Values.global.dbPassword }}';
    ALTER DATABASE {{ .Release.Name }} SET search_path TO {{ .Release.Name }}, public;

  replica.conf: |
    hot_standby = on
    primary_conninfo = 'host={{ .Values.global.dbType }}-0.{{ include "postgres.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local port={{ .Values.global.dbPort }} user={{ .Release.Name }} password={{ .Values.global.dbPassword | quote }}'

  secondary.sh: |
    #!/bin/bash
    set -ex
    echo "PGDATA: $PGDATA"
    echo "Checking existence of $PGDATA/PG_VERSION"

    echo "Running secondary.sh on $(hostname)"
    if [ ! -s "$PGDATA/PG_VERSION" ]; then
      echo "Starting base backup from primary..."
      pg_basebackup -h {{ .Values.global.dbType }}-0.{{ include "postgres.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local -D "$PGDATA" -U {{ .Release.Name }} -Fp -Xs -P -R
    else
      echo "PG_VERSION exists, skipping pg_basebackup"
      cat $PGDATA/PG_VERSION
    fi

    # üî• PostgreSQL ÏßÅÏ†ë Ïã§Ìñâ
    exec docker-entrypoint.sh postgres
{{- end }}
