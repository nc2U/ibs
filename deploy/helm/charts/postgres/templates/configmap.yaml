{{- if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.fullname" . }}-config
data:
  POSTGRES_USER: "{{ .Release.Name }}"
  POSTGRES_DB: "{{ .Release.Name }}"
  TZ: "Asia/Seoul"
  pg_hba.conf: |
    host replication {{ .Release.Name }} 0.0.0.0/0 md5
    host all {{ .Release.Name }} 0.0.0.0/0 md5
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.fullname" . }}-replica-cm
data:
  primary.conf: |
    wal_level = replica
    max_wal_senders = 10
    wal_keep_size = 64
    hot_standby = on

  primary.sql: |
    \c {{ .Release.Name }}
    CREATE SCHEMA IF NOT EXISTS {{ .Release.Name }};
    GRANT ALL ON SCHEMA {{ .Release.Name }} TO {{ .Release.Name }};
    ALTER ROLE "{{ .Release.Name }}" WITH REPLICATION;
    ALTER DATABASE {{ .Release.Name }} SET search_path TO {{ .Release.Name }}, public;

  replica.conf: |
    hot_standby = on
    primary_conninfo = 'host={{ .Values.global.dbType }}-0.{{ include "postgres.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local port={{ .Values.global.dbPort }} user={{ .Release.Name }} password={{ .Values.global.dbPassword | quote }}'

  secondary.sh: |
    #!/bin/bash
    set -e
    ordinal=$(hostname | awk -F'-' '{print $NF}')

    if [[ "$ordinal" -ne 0 ]]; then
      echo "üîÅ Replica detected (ordinal=$ordinal), preparing base backup"
      rm -rf "$PGDATA"/* # Í∏∞Ï°¥ PGDATA Í∞ïÏ†ú ÏÇ≠Ï†ú

      until pg_basebackup -h postgres-0.postgres.ibs-dev.svc.cluster.local -U repl_user -D "$PGDATA" -Fp -Xs -P -R; do
        echo "Waiting for master to accept replication..."
        sleep 2
      done
      chown -R postgres:postgres "$PGDATA"
    fi
{{- end }}
