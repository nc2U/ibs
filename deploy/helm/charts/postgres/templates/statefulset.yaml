{{- if .Values.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: init-{{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
            - "-c"
            - |
              set -ex
              echo "Starting init-postgres"
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/replica-config/primary.conf /etc/postgresql/postgresql.conf
                cp /mnt/replica-config/primary.sql /docker-entrypoint-initdb.d/init.sql
              else
                cp /mnt/replica-config/replica.conf /etc/postgresql/postgresql.conf
                cp /mnt/replica-config/secondary.sh /etc/postgresql/secondary.sh
                chmod +x /etc/postgresql/secondary.sh
              fi
          volumeMounts:
            - name: {{ include "postgres.fullname" . }}-replica
              mountPath: /mnt/replica-config
            - name: postgres-conf
              mountPath: /etc/postgresql   # 주 컨테이너와 동일 경로로 마운트
            - name: initdb-d
              mountPath: /docker-entrypoint-initdb.d
      restartPolicy: Always
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # Using Secrets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-db-auth
                  key: POSTGRES_PASSWORD
          envFrom:
            - configMapRef:
                name: {{ include "postgres.fullname" . }}-config
          ports:
            - containerPort: {{ .Values.global.dbPort }}
              name: postgres-port
              protocol: TCP
          startupProbe:
            exec:
              command: [ "pg_isready", "-U", "{{ .Release.Name }}", "-d", "{{ .Release.Name }}" ]
            initialDelaySeconds: 10
            timeoutSeconds: 1
            failureThreshold: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command: [ "pg_isready", "-U", "{{ .Release.Name }}", "-d", "{{ .Release.Name }}" ]
            periodSeconds: 30          # 30초마다 상태 확인
            timeoutSeconds: 1          # 1초 후에 실패로 간주
            failureThreshold: 5        # 몇 번 실패해야 Pod를 실패로 판단할 것인지
            successThreshold: 1        # 몇 번 성공해야 Ready 상태로 간주할 것인지
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: postgres-conf # initContainer 가 ConfigMap 에서 복사한 파일
              mountPath: /etc/postgresql
            - name: initdb-d  # initContainer 가 ConfigMap 에서 복사한 시작 파일
              mountPath: /docker-entrypoint-initdb.d
            - name: dump-backup
              mountPath: /var/backups
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ include "postgres.fullname" . }}-replica # for init to main
          configMap:
            name: {{ include "postgres.fullname" . }}-replica-cm
            #defaultMode: 0544
        - name: postgres-conf # for init to main
          emptyDir: { }
        - name: initdb-d # for init to main
          emptyDir: { }
        - name: dump-backup
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-{{ include "postgres.fullname" . }}-{{ .Values.global.appMode }}-backup-pvc
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: "nfs-client"
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.volumes.dataPvcStorage }}
{{- end }}
