apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mariadb.fullname" . }}
spec:
  serviceName: {{ include "mariadb.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mariadb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mariadb.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
        - name: init-{{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
            - "-c"
            - |
              set -ex
              echo 'Starting init-mariadb';
              # Check config map to directory that already exists
              # (but must be used as a volume for main container)
              ls /mnt/replica-config
              # Statefulset has sticky identity, number should be last
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              # Copy appropriate conf.d files from config-map to
              # mariadb-config volume (emptyDir) depending on pod number
              if [[ $ordinal -eq 0 ]]; then
                # This file holds SQL for connecting to primary
                cp /mnt/replica-config/primary.cnf /etc/mysql/conf.d/server-id.cnf
                # Create the users needed for replication on primary on a volume
                # initdb (emptyDir)
                cp /mnt/replica-config/primary.sql /docker-entrypoint-initdb.d
              else
                # This file holds SQL for connecting to secondary
                cp /mnt/replica-config/replica.cnf /etc/mysql/conf.d/server-id.cnf
                # On replicas use secondary configuration on initdb volume
                cp /mnt/replica-config/secondary.sql /docker-entrypoint-initdb.d
              fi
              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((3000 + $ordinal)) >> etc/mysql/conf.d/server-id.cnf
              ls /etc/mysql/conf.d/
              cat /etc/mysql/conf.d/server-id.cnf
          volumeMounts:
            - name: {{ include "mariadb.fullname" . }}-replica
              mountPath: /mnt/replica-config
            - name: mariadb-conf-d
              mountPath: /etc/mysql/conf.d/
            - name: initdb-d
              mountPath: /docker-entrypoint-initdb.d
      restartPolicy: Always
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --character-set-server=utf8mb4
            - --collation-server=utf8mb4_unicode_ci
          env:
            # Using Secrets
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-db-auth
                  key: PASSWORD
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-db-auth
                  key: mariadb-root-password
            - name: MYSQL_INITDB_SKIP_TZINFO
              value: "1"
          envFrom:
            - configMapRef:
                name: {{ include "mariadb.fullname" . }}-config
          ports:
            - containerPort: 3306
              name: mariadb-port
              protocol: TCP
          startupProbe:
            exec:
              command: [ "mariadb-admin", "ping", "-u{{ .Release.Name }}", "-p{{ .Values.global.dbPassword }}" ]
            initialDelaySeconds: 10
            timeoutSeconds: 1
            failureThreshold: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command: [ "mariadb-admin", "ping", "-u{{ .Release.Name }}", "-p{{ .Values.global.dbPassword }}" ]
            periodSeconds: 30          # 30초마다 상태 확인
            timeoutSeconds: 1          # 1초 후에 실패로 간주
            failureThreshold: 5        # 몇 번 실패해야 Pod를 실패로 판단할 것인지
            successThreshold: 1        # 몇 번 성공해야 Ready 상태로 간주할 것인지
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
            - name: mariadb-conf-d
              mountPath: /etc/mysql/conf.d/
            - name: initdb-d
              mountPath: /docker-entrypoint-initdb.d
            - name: dump-backup
              mountPath: /var/backups
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ include "mariadb.fullname" . }}-replica # for init to main
          configMap:
            name: {{ include "mariadb.fullname" . }}-replica-cm
            #defaultMode: 0544
        - name: mariadb-conf-d # for init to main
          emptyDir: { }
        - name: initdb-d # for init to main
          emptyDir: { }
        - name: dump-backup
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-{{ include "mariadb.fullname" . }}-{{ .Values.global.appMode }}-backup-pvc
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: "nfs-client"
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.volumes.dataPvcStorage }}
