{{- if .Values.enabled }}
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ include "cnpg.clusterName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cnpg.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  # Number of instances (primary + replicas)
  instances: {{ .Values.replication.instances | default 2 }}

  # PostgreSQL image
  imageName: {{ include "cnpg.image" . }}
  {{- with .Values.image.pullPolicy }}
  imagePullPolicy: {{ . }}
  {{- end }}

  # PostgreSQL user/group IDs (official postgres image uses 999:999)
  postgresUID: 999
  postgresGID: 999

  # Primary update strategy
  primaryUpdateStrategy: unsupervised
  primaryUpdateMethod: switchover

  # Bootstrap configuration
  bootstrap:
    initdb:
      database: {{ include "cnpg.database" . }}
      owner: {{ include "cnpg.username" . }}
      secret:
        name: {{ include "cnpg.fullname" . }}-app
      {{- with .Values.bootstrap.initdb.encoding }}
      encoding: {{ . }}
      {{- end }}
      {{- with .Values.bootstrap.initdb.localeCollate }}
      localeCollate: {{ . }}
      {{- end }}
      {{- with .Values.bootstrap.initdb.localeCType }}
      localeCType: {{ . }}
      {{- end }}
      postInitApplicationSQL:
        - CREATE DATABASE {{ include "cnpg.database" . }} OWNER {{ include "cnpg.username" . }};
        - CREATE SCHEMA IF NOT EXISTS {{ include "cnpg.database" . }} AUTHORIZATION {{ include "cnpg.username" . }};
        - GRANT ALL PRIVILEGES ON DATABASE {{ include "cnpg.database" . }} TO {{ include "cnpg.username" . }};
        - GRANT ALL ON SCHEMA {{ include "cnpg.database" . }} TO {{ include "cnpg.username" . }};
        - ALTER DATABASE {{ include "cnpg.database" . }} SET search_path TO {{ include "cnpg.database" . }}, public;

  # Superuser secret
  superuserSecret:
    name: {{ include "cnpg.fullname" . }}-superuser

  # Storage configuration
  storage:
    {{- with .Values.storage.storageClass }}
    storageClass: {{ . }}
    {{- end }}
    size: {{ .Values.storage.size | default "1Gi" }}

  # Replication configuration
  {{- if gt (int .Values.replication.instances) 1 }}
  minSyncReplicas: {{ .Values.replication.minSyncReplicas | default 0 }}
  maxSyncReplicas: {{ .Values.replication.maxSyncReplicas | default 0 }}
  {{- end }}

  # PostgreSQL configuration
  postgresql:
    parameters:
      {{- if .Values.postgresql.parameters }}
      {{- range $key, $value := .Values.postgresql.parameters }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      {{- if .Values.additionalConfig }}
      {{- range $key, $value := .Values.additionalConfig }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
    {{- if .Values.postgresql.pg_hba }}
    pg_hba:
      {{- toYaml .Values.postgresql.pg_hba | nindent 6 }}
    {{- else }}
    pg_hba:
      # Allow all connections with SCRAM-SHA-256 authentication
      - host all all all scram-sha-256
    {{- end }}

  # Resource limits
  {{- with .Values.resources }}
  resources:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  # Affinity configuration
  {{- if .Values.affinity }}
  affinity:
    {{- if .Values.affinity.podAntiAffinityType }}
    podAntiAffinityType: {{ .Values.affinity.podAntiAffinityType }}
    {{- end }}
    {{- with .Values.affinity.nodeAffinity }}
    nodeAffinity:
      {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- end }}

  # Tolerations
  {{- with .Values.tolerations }}
  tolerations:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  # Node selector
  {{- with .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  # Backup configuration
  {{- if and .Values.backup.enabled .Values.backup.s3.enabled }}
  backup:
    barmanObjectStore:
      destinationPath: {{ include "cnpg.backupDestination" . }}
      {{- with .Values.backup.s3.endpoint }}
      endpointURL: {{ . }}
      {{- end }}
      s3Credentials:
        accessKeyId:
          name: {{ include "cnpg.fullname" . }}-backup-s3
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: {{ include "cnpg.fullname" . }}-backup-s3
          key: ACCESS_SECRET_KEY
      wal:
        compression: {{ .Values.backup.wal.compression | default "gzip" }}
        {{- with .Values.backup.wal.maxParallel }}
        maxParallel: {{ . }}
        {{- end }}
      data:
        compression: {{ .Values.backup.data.compression | default "gzip" }}
        {{- with .Values.backup.data.jobs }}
        jobs: {{ . }}
        {{- end }}
    retentionPolicy: {{ .Values.backup.retentionPolicy | default "30d" | quote }}
  {{- end }}

  # Monitoring
  {{- if .Values.monitoring.enabled }}
  monitoring:
    enablePodMonitor: true
    {{- with .Values.monitoring.customQueries }}
    customQueriesConfigMap:
      - name: {{ include "cnpg.fullname" . }}-monitoring
        key: custom-queries
    {{- end }}
  {{- end }}

  # Service account
  {{- if .Values.serviceAccount.create }}
  serviceAccountTemplate:
    metadata:
      name: {{ include "cnpg.serviceAccountName" . }}
      labels:
        {{- include "cnpg.labels" . | nindent 8 }}
      {{- with .Values.serviceAccount.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- end }}

  # Node maintenance window
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true

  # Certificates (if enabled)
  {{- if .Values.certificates.enabled }}
  certificates:
    serverTLSSecret: {{ include "cnpg.fullname" . }}-server-cert
    serverCASecret: {{ include "cnpg.fullname" . }}-server-ca
    clientCASecret: {{ include "cnpg.fullname" . }}-client-ca
    replicationTLSSecret: {{ include "cnpg.fullname" . }}-replication-cert
  {{- end }}

  # Managed roles (if any)
  {{- with .Values.managedRoles }}
  managed:
    roles:
      {{- toYaml . | nindent 6 }}
  {{- end }}

{{- if and .Values.backup.enabled .Values.backup.schedule }}
---
# Scheduled Backup
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: {{ include "cnpg.fullname" . }}-backup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cnpg.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  schedule: {{ .Values.backup.schedule | quote }}
  backupOwnerReference: self
  cluster:
    name: {{ include "cnpg.clusterName" . }}
  immediate: false
{{- end }}

{{- if .Values.pgbouncer.enabled }}
---
# PgBouncer Pooler
apiVersion: postgresql.cnpg.io/v1
kind: Pooler
metadata:
  name: {{ include "cnpg.fullname" . }}-pooler
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cnpg.labels" . | nindent 4 }}
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  cluster:
    name: {{ include "cnpg.clusterName" . }}
  instances: {{ .Values.pgbouncer.instances | default 2 }}
  type: rw
  pgbouncer:
    poolMode: {{ .Values.pgbouncer.poolMode | default "transaction" }}
    parameters:
      {{- range $key, $value := .Values.pgbouncer.parameters }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  monitoring:
    enablePodMonitor: {{ .Values.monitoring.enabled }}
{{- end }}
{{- end }}
