name: Vue [Dev]

on:
  push:
    paths:
      - "app/vue/**"
      - ".github/workflows/vue_dev.yml"
    branches: [ "develop" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# jobÏùÄ ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†ïÌïú ÌîåÎû´ÌèºÏùÑ ÌÜµÌï¥ steps ÎùºÎäî ÏùºÎ†®Ïùò Í≥ºÏ†ïÏùÑ Ïã§Ìñâ.
# Ïó¨Îü¨ Í∞úÏùò job ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏúºÎ©∞, Ïó¨Îü¨ Í∞úÏùò job ÏùÑ ÏÇ¨Ïö©Ìï† ÎïåÎäî ÏÑúÎ°ú Ï†ïÎ≥¥ÎèÑ ÍµêÌôò Í∞ÄÎä•.
# Í∞ÅÍ∞Å ÎèÖÎ¶ΩÏ†ÅÏúºÎ°úÎèÑ Ïã§Ìñâ Í∞ÄÎä•.
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      # Î†àÌååÏßÄÌÑ∞Î¶¨ Ï≤¥ÌÅ¨ ÏïÑÏõÉ
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          ref: 'develop'
      
      # Node.js ÏÇ¨Ïö©
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 24
      
      # pnpm use
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      
      # node_modules Ï∫êÏã±
      - name: Cache vue node
        uses: actions/cache@v3
        id: cache_vue
        with:
          path: ./app/vue/node_modules
          key: pnpm-packages-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      # node_modules Î≥ÄÌôîÍ∏∞ ÏûàÏúºÎ©¥ ÎπåÎìú
      - name: Install Dependencies
        if: steps.cache_vue.outputs.cache-hit != 'true'
        run: cd app/vue && pnpm i
      
      #      - run: pnpm lint
      #        # `if: ${{ always() }}`
      #        # ÎßåÏïΩ `pnpm lint`ÎùºÎäî Í≥≥ÏóêÏÑú ÏóêÎü¨Í∞Ä ÎÇ¨ÏùÑ Í≤ΩÏö∞ Ïù¥ÌõÑ buildÎ•º Ïã§ÌñâÌïòÏßÄ ÏïäÍ≥† Ìï¥Îãπ workflowÍ∞Ä Ï¢ÖÎ£åÎê®.
      #        # `if: ${{ always() }}`ÎùºÎäî Î¨∏Î≤ïÏùÑ ÏÇ¨Ïö© Ïãú `pnpm lint`ÎùºÎäî Í≥≥ÏóêÏÑú ÏóêÎü¨Í∞Ä ÎÇòÎèÑ
      #        # Ïù¥ÌõÑÏùò buildÍπåÏßÄ Îã§ Ïã§ÌñâÏùÑ Ìï¥Î≥¥Í≥† ÎÇú Îí§ Ï¢ÖÎ£å ÌïòÎØÄÎ°ú Î™®Îì† ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê `if: ${{ always() }}`Î•º Î∂ôÏûÑ.
      #        if: ${{ always() }}
      
      # setup and lint ÏóêÎü¨Í∞Ä ÏóÜÏúºÎ©¥ ÎπåÎìú
      - name: Build the Source Code
        env:
          NODE_ENV: production
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        run: |
          cd app/vue
          # ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÎîîÎ†âÌÑ∞Î¶¨Î°ú ÎπåÎìú
          export BUILD_DIR="../django/static/dist_${BUILD_TIMESTAMP}"
          pnpm build

      # Î∞∞Ìè¨ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      - name: Create deployment metadata
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        run: |
          cd app/django/static
          echo "{
            \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"git_sha\": \"${{ github.sha }}\",
            \"git_branch\": \"${{ github.ref_name }}\",
            \"build_number\": \"${{ github.run_number }}\",
            \"deployer\": \"${{ github.actor }}\"
          }" > dist_${BUILD_TIMESTAMP}/deploy.json

      # ÎπåÎìú Í≤ÄÏ¶ù
      - name: Verify Production Build
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        run: |
          cd app/django/static/dist_${BUILD_TIMESTAMP}

          echo "üîç Verifying production build..."

          # index.html Ï°¥Ïû¨ ÌôïÏù∏
          if [ ! -f "index.html" ]; then
            echo "‚ùå ERROR: index.html not found!"
            exit 1
          fi

          # base path Í≤ÄÏ¶ù (/static/dist Í≤ΩÎ°ú ÏÇ¨Ïö© ÌôïÏù∏)
          if ! grep -q '/static/dist/assets/' index.html; then
            echo "‚ùå ERROR: Build base path incorrect! Expected '/static/dist/assets/'"
            echo "Found paths:"
            grep -o 'src="[^"]*"' index.html | head -5
            exit 1
          fi

          # console.log Ï†úÍ±∞ ÌôïÏù∏ (Í≤ΩÍ≥†Îßå)
          if find assets -name "*.js" -exec grep -l 'console\.log' {} \; 2>/dev/null | grep -q .; then
            echo "‚ö†Ô∏è  WARNING: Console logs found in production build"
          fi

          # sourcemap Ï†úÏô∏ ÌôïÏù∏ (Í≤ΩÍ≥†Îßå)
          if find assets -name "*.map" 2>/dev/null | grep -q .; then
            echo "‚ö†Ô∏è  WARNING: Sourcemap files found in production build"
          fi

          echo "‚úÖ Production build verification passed"
          echo "üìä Build stats:"
          echo "  - index.html: $(wc -c < index.html) bytes"
          echo "  - Total assets: $(find assets -type f | wc -l) files"
          echo "  - Total size: $(du -sh assets | cut -f1)"

      # Îã®ÏúÑ ÌÖåÏä§Ìä∏
      - name: Vue Unit Test using Vitest
        run: cd app/vue && pnpm test:unit

      # ÏÉà ÎπåÎìúÎßå ÏóÖÎ°úÎìú (Ï†ÑÏ≤¥ staticÏù¥ ÏïÑÎãå)
      - name: Upload new build to server
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          source: 'app/django/static/dist_${{ github.run_number }}_${{ github.sha }}'
          target: ${{ secrets.CICD_PATH }}/dev/

      # ÎîîÎ≤ÑÍπÖ: ÏóÖÎ°úÎìúÎêú ÏúÑÏπò ÌôïÏù∏
      - name: Debug uploaded location
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            echo "üîç Searching for uploaded build..."
            find ${{ secrets.CICD_PATH }}/dev -name "dist_${{ github.run_number }}_*" -type d
            echo "---"
            echo "Expected: ${{ secrets.CICD_PATH }}/dev/app/django/static/dist_${{ github.run_number }}_${{ github.sha }}"

      # SCP ÌõÑ ÌååÏùº Î¨¥Í≤∞ÏÑ± Í≤ÄÏ¶ù
      - name: Verify upload integrity
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            set -e
            cd ${{ secrets.CICD_PATH }}/dev/app/django/static
            NEW_BUILD="dist_${{ github.run_number }}_${{ github.sha }}"

            echo "üîç Verifying uploaded files for: $NEW_BUILD"

            test -d "$NEW_BUILD" || { echo "‚ùå ERROR: Build directory not found"; exit 1; }
            test -f "$NEW_BUILD/index.html" || { echo "‚ùå ERROR: index.html not uploaded"; exit 1; }
            test -d "$NEW_BUILD/assets" || { echo "‚ùå ERROR: assets directory not uploaded"; exit 1; }

            ASSET_COUNT=$(find "$NEW_BUILD/assets" -type f 2>/dev/null | wc -l)
            [ "$ASSET_COUNT" -ge 10 ] || { echo "‚ùå ERROR: Too few assets ($ASSET_COUNT)"; exit 1; }

            MAIN_JS=$(grep -o 'assets/index-[^"]*\.js' "$NEW_BUILD/index.html" 2>/dev/null | head -1)
            if [ -n "$MAIN_JS" ]; then
              if [ ! -f "$NEW_BUILD/$MAIN_JS" ]; then
                echo "‚ùå ERROR: Referenced main JS missing: $MAIN_JS"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è  WARNING: Could not detect main JS reference in index.html"
            fi

            CSS_COUNT=$(find "$NEW_BUILD/assets" -name "*.css" 2>/dev/null | wc -l)
            if [ "$CSS_COUNT" -eq 0 ]; then
              echo "‚ùå ERROR: No CSS files found in deployment!"
              exit 1
            fi

            echo "‚úÖ Upload integrity verified"
            echo "  ‚úì Main JS: $MAIN_JS"
            echo "  ‚úì CSS files: $CSS_COUNT"
            echo "  ‚úì Total assets: $ASSET_COUNT files"

      # ÏõêÏûêÏ†Å Î∞∞Ìè¨ (Symlink Swap)
      - name: Atomic deployment with symlink swap
        env:
          BUILD_TIMESTAMP: ${{ github.run_number }}_${{ github.sha }}
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            cd ${{ secrets.CICD_PATH }}/dev/app/django/static

            NEW_BUILD="dist_${{ github.run_number }}_${{ github.sha }}"
            echo "üì¶ Deploying: $NEW_BUILD"

            if [ ! -d "$NEW_BUILD" ]; then
              echo "‚ùå ERROR: Build directory not found: $NEW_BUILD"
              exit 1
            fi

            if [ -L "dist" ]; then
              PREVIOUS_BUILD=$(readlink dist)
              echo "Previous build: $PREVIOUS_BUILD"
            elif [ -d "dist" ]; then
              echo "‚ö†Ô∏è  WARNING: dist is a directory, not a symlink. Converting to symlink..."
              PREVIOUS_BUILD=""
            fi

            # Ïã¨Î≥ºÎ¶≠ ÎßÅÌÅ¨ ÏõêÏûêÏ†Å ÍµêÏ≤¥ (ÎîîÎ†âÌÑ∞Î¶¨ÎèÑ Ï≤òÎ¶¨)
            ln -sfn "$NEW_BUILD" dist.new

            # Í∏∞Ï°¥ dist Î∞±ÏóÖ (Î°§Î∞±Ïö©)
            if [ -e "dist" ] || [ -L "dist" ]; then
              mv dist dist.backup
            fi

            # ÏÉà Ïã¨Î≥ºÎ¶≠ ÎßÅÌÅ¨Î•º distÎ°ú Ïù¥Îèô
            mv dist.new dist

            if [ ! -L "dist" ]; then
              echo "‚ùå ERROR: Failed to create symlink!"
              # Î°§Î∞±
              if [ -e "dist.backup" ]; then
                mv dist.backup dist
                echo "Rolled back to previous state"
              fi
              exit 1
            fi

            CURRENT_LINK=$(readlink dist)
            if [ "$CURRENT_LINK" != "$NEW_BUILD" ]; then
              echo "‚ùå ERROR: Symlink points to wrong target: $CURRENT_LINK"
              exit 1
            fi

            if [ ! -d "dist" ]; then
              echo "‚ùå ERROR: Symlink is broken! Rolling back..."
              rm -f dist
              if [ -e "dist.backup" ]; then
                mv dist.backup dist
                echo "Rolled back to previous state"
              elif [ -n "$PREVIOUS_BUILD" ] && [ -d "$PREVIOUS_BUILD" ]; then
                ln -sfn "$PREVIOUS_BUILD" dist
                echo "Rolled back to: $PREVIOUS_BUILD"
              fi
              exit 1
            fi

            echo "‚úÖ Symlink verified: dist -> $CURRENT_LINK"

            # Î∞±ÏóÖ Ï†úÍ±∞ (ÏÑ±Í≥µ Ïãú)
            rm -rf dist.backup

            echo ""
            echo "üßπ Cleaning old builds (keeping 3 most recent)..."
            ALL_BUILDS=$(ls -dt dist_* 2>/dev/null)
            BUILD_COUNT=$(echo "$ALL_BUILDS" | wc -l)
            echo "Total builds found: $BUILD_COUNT"

            if [ "$BUILD_COUNT" -gt 3 ]; then
              echo "$ALL_BUILDS" | tail -n +4 | while read OLD_BUILD; do
                if [ "$OLD_BUILD" != "$CURRENT_LINK" ]; then
                  echo "  Removing: $OLD_BUILD"
                  rm -rf "$OLD_BUILD"
                else
                  echo "  Skipping active build: $OLD_BUILD"
                fi
              done
            fi

            echo ""
            echo "‚úÖ Deployment complete!"
            echo "üìä Current state:"
            echo "  Active: $(readlink dist)"
            echo "  Remaining builds:"
            ls -lth | grep "^d" | grep "dist_" | head -5

      # NFS ÎèôÍ∏∞Ìôî ÎåÄÍ∏∞
      - name: Wait for NFS sync
        run: |
          echo "‚è≥ Waiting for NFS synchronization..."
          sleep 5
          echo "‚úÖ NFS sync complete"

      # Î∞∞Ìè¨ Í≤ÄÏ¶ù (ÌååÏùº Î¨¥Í≤∞ÏÑ± ÌôïÏù∏)
      - name: Verify deployment integrity
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            cd ${{ secrets.CICD_PATH }}/dev/app/django/static

            echo "üîç Verifying deployment integrity..."

            if [ ! -f "dist/index.html" ]; then
              echo "‚ùå Deployment failed: index.html not found"
              exit 1
            fi

            if [ ! -d "dist/assets" ]; then
              echo "‚ùå Deployment failed: assets directory not found"
              exit 1
            fi

            MAIN_JS=$(grep -o 'assets/index-[^"]*\.js' dist/index.html 2>/dev/null | head -1)
            if [ -n "$MAIN_JS" ]; then
              if [ ! -f "dist/$MAIN_JS" ]; then
                echo "‚ùå Deployment failed: Referenced main JS missing: $MAIN_JS"
                echo "Available index JS files:"
                ls -lh dist/assets/index-*.js 2>/dev/null || echo "  None found!"
                exit 1
              fi
              echo "  ‚úì Main JS exists: $MAIN_JS"
            else
              echo "‚ö†Ô∏è  WARNING: Could not detect main JS reference in index.html"
            fi

            CSS_COUNT=$(find dist/assets -name "*.css" 2>/dev/null | wc -l)
            if [ "$CSS_COUNT" -eq 0 ]; then
              echo "‚ùå ERROR: No CSS files found in deployment!"
              exit 1
            fi
            echo "  ‚úì CSS files: $CSS_COUNT"

            TOTAL_ASSETS=$(find dist/assets -type f 2>/dev/null | wc -l)
            echo "  ‚úì Total assets: $TOTAL_ASSETS"

            echo ""
            echo "‚úÖ Deployment integrity verified"
            echo "üìä Deployment info:"
            if [ -f "dist/deploy.json" ]; then
              cat dist/deploy.json
            fi
            echo ""
            echo "Active build: $(readlink dist)"

      # Kubernetes Pod Ïû¨ÏãúÏûë (Django ÌÖúÌîåÎ¶ø Ï∫êÏãú ÌÅ¥Î¶¨Ïñ¥)
      - name: Restart web and nginx pods
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            echo "üîÑ Restarting Nginx and Web pods..."
            kubectl rollout restart deployment/nginx -n ibs-dev
            kubectl rollout restart deployment/web -n ibs-dev

            echo "‚è≥ Waiting for rollout to complete..."
            kubectl rollout status deployment/nginx -n ibs-dev --timeout=120s
            kubectl rollout status deployment/web -n ibs-dev --timeout=120s

            echo "‚úÖ Pods restarted successfully"

      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # Ïã§Ìå®ÌñàÏùÑ Îïå Ïã§Ìñâ
        uses: ./.github/actions/slack-notify    # ÏßÅÏ†ë 'ÎßåÎì†' ActionÏù¥ÎØÄÎ°ú uses ÌÇ§ÏõåÎìúÎ•º Ïù¥Ïö©Ìï¥ÏÑú ÏïÑÎûò Í≤ΩÎ°úÎ•º ÏûÖÎ†•Ìï¥Ï§çÎãàÎã§.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # ÏÑ±Í≥µÌï† ÎïåÎßå Ïã§Ìñâ
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status inputÏùÄ Î∞õÎäî Ï™ΩÏóêÏÑú default Í∞íÏùÑ Ï†ïÌï¥ÎÜ®Í∏∞ ÎïåÎ¨∏Ïóê successÏùº ÎïåÎßå Ï†ÑÎã¨.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
