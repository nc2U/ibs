name: Vue Update [Prod]

on:
  push:
    paths:
      - "app/vue/**"
      - ".github/workflows/vue_prod.yml"
    branches: [ "master" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      # 레파지터리 체크 아웃
      - name: Check out source code
        uses: actions/checkout@v4
      
      # Node.js 사용
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 24
      
      # pnpm use
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false
      
      # node_modules 캐싱
      - name: Cache vue node
        uses: actions/cache@v3
        id: cache_vue
        with:
          path: ./app/vue/node_modules
          key: pnpm-packages-${{ hashFiles('**/pnpm-lock.yaml') }}
      
      # node_modules 변화기 있으면 빌드
      - name: Install Dependencies
        if: steps.cache_vue.outputs.cache-hit != 'true'
        run: cd app/vue && pnpm i
      
      #      - run: pnpm lint
      #        # `if: ${{ always() }}`
      #        # 만약 `pnpm lint`라는 곳에서 에러가 났을 경우 이후 build를 실행하지 않고 해당 workflow가 종료됨.
      #        # `if: ${{ always() }}`라는 문법을 사용 시 `pnpm lint`라는 곳에서 에러가 나도
      #        # 이후의 build까지 다 실행을 해보고 난 뒤 종료 하므로 모든 테스트 스크립트에 `if: ${{ always() }}`를 붙임.
      #        if: ${{ always() }}
      
      # setup and lint 에러가 없으면 빌드
      - name: Build the Source Code
        run: cd app/vue && pnpm build && pnpm docs:build
      
      # 단위 테스트
      - name: Vue Unit Test using Vitest
        run: cd app/vue && pnpm test:unit
      
      # docs 배포
      - name: Docs Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: app/vue/docs/.vitepress/dist
      
      # Vue Source to server copy transfer
      - name: Copy Vue -> django static/dist (NFS server)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          source: 'app/django/static'
          target: ${{ secrets.CICD_PATH }}/prod/

      # web pod --> fetch_commits
      - name: Django fetch_commits
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            web_pod=$(kubectl get pod -n ibs-prod | grep web | cut -d ' ' -f1)
            kubectl exec -it -n ibs-prod $web_pod -- python manage.py fetch_commits --limit 30
      
      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
